//Brute Force tc O(N2) sc O(1)
class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j <= i + k && j < nums.length; j++) {
                if (nums[i] == nums[j]) return true;
            }
        }
        return false;
    }
}

//Hashmap solution TC O(N) SC -O(N)
class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
     Map<Integer,Integer> map = new HashMap<>(); 
        for (int i = 0; i < nums.length; i++) {
            if (map.containsKey(nums[i])) {
                int prevIndex = map.get(nums[i]);
                if (i - prevIndex <= k) {
                    return true;
                }
            }
            map.put(nums[i],i); 
        }
        return false;
    }
}

//hashSet solution TC - O(N) SC- O(K)
import java.util.*;

class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        Set<Integer> window = new HashSet<>();
        for (int i = 0; i < nums.length; i++) {
            if (window.contains(nums[i])) return true;
            window.add(nums[i]);
            if (window.size() > k) {
                window.remove(nums[i - k]); // slide window
            }
        }
        return false;
    }
}
