//Brute force solution tc O(N2) SC O(1)
 class Solution {
    public int[] productExceptSelf(int[] nums) {
       int n =nums.length;
       int[] ans = new int[n];
       for(int i=0;i<n;i++){
        int prod = 1;
        for(int j= 0;j<n;j++){
            if(i!=j){
                prod *= nums[j]; 
            }}
            ans[i] = prod;
        }
       return ans;
    }
}

//Product of Array Except itself Tc O(N) Sc O(1) NOT ALLOWED IN LEETCODE
class Solution {
    public int[] productExceptSelf(int[] nums) {
    int n = nums.length;
    int prod =1;
    int zCount =0;
    for(int num:nums){
        if(num ==0)zCount++;
        else prod *= num;
    }
    int[] ans = new int[n];
    for(int i=0;i<n;i++){
        if(zCount>1) ans[i] =0;
        else if(zCount ==1)
        ans[i] = (nums[i]==0)?prod:0;
        else ans[i] = prod/nums[i];
    }
    return ans;
    }
}

//using suffix and prefix array AND ANS array TC O(N) SC O(N)
class Solution {
    public int[] productExceptSelf(int[] nums) {
    int n = nums.length;
    int[] prefix = new int[n];
    int[] suffix = new int[n];
    int[] ans = new int[n];
    prefix[0] =1;
    for(int i =1;i<n;i++){
        prefix[i] = prefix[i-1] * nums[i-1];
    }
    suffix[n-1] =1;
    for(int i=n-2;i>=0;i--){
        suffix[i] = suffix[i+1] * nums[i+1];
    }
    for(int i =0;i<n;i++){
        ans[i] = prefix[i] *suffix[i];
    }
    return ans;
    }
}

// Using Optimized Prefix + Suffix (O(1) extra space) TC O(N)
class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int[] res = new int[n];
        Arrays.fill(res, 1);
        
        int prefix = 1;
        for (int i = 0; i < n; i++) {
            res[i] = prefix;
            prefix *= nums[i];
        }
        
        int postfix = 1;
        for (int i = n - 1; i >= 0; i--) {
            res[i] *= postfix;
            postfix *= nums[i];
        }
        return res;
    }
}
