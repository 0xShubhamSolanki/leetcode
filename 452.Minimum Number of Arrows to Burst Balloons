//TC -Olog n scO1
class Solution {
    public int findMinArrowShots(int[][] points) {
     if (points.length == 0) return 0;

    Arrays.sort(points, (a, b) -> Integer.compare(a[0], b[0]));

    int arrows = 1;
    int[] current = points[0];

    for (int i = 1; i < points.length; i++) {
        if (points[i][0] <= current[1]) {
            current[0] = Math.max(current[0], points[i][0]);
            current[1] = Math.min(current[1], points[i][1]);
        } else {
            arrows++;
            current = points[i];
        }
    }

    return arrows;
}} 

//best approch TC -Olog n scO1

class Solution {
    public int findMinArrowShots(int[][] points) {
     if (points.length == 0) return 0;

     Arrays.sort(points, (a,b)-> Integer.compare(a[1],b[1]));
     int arrow =1;
     int end = points[0][1];

     for(int i=1;i<points.length;i++){
        if(points[i][0]>end){
            arrow++;
            end = points[i][1];
        }
     }    
     return arrow;
    }
}
